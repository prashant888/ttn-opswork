#! /bin/sh
### BEGIN INIT INFO
# Provides:          graylog-collector
# Required-Start:    $network $named $remote_fs $syslog
# Required-Stop:     $network $named $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Graylog Collector
# Description:       Graylog's open source log shipper
### END INIT INFO

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DESC="Graylog Collector"
NAME=graylog-collector
PIDDIR=/var/run/graylog-collector
PIDFILE=$PIDDIR/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
COLLECTOR_USER=graylog-collector
COLLECTOR_BIN=/usr/share/graylog-collector/bin/graylog-collector
JAVA=<%= node.graylog2[:collector][:java_bin] %>
JAVA_HOME=<%= node.graylog2[:collector][:java_home] %>
DAEMON=${JAVA:=/usr/bin/java}
DAEMON_ARGS="run -f /etc/graylog/collector/collector.conf"
RUN=yes

[ -r /etc/default/$NAME ] && . /etc/default/$NAME

[ -x "$DAEMON" ] || exit 0

. /lib/init/vars.sh

. /lib/lsb/init-functions

running()
{
  [ ! -f "$PIDFILE" ] && return 1
  status="0"
  pidofproc -p $PIDFILE $DAEMON >/dev/null || status="$?"
  if [ "$status" = 0 ]; then
    return 0
  fi

  return 1
}

do_start()
{
  if [ "$RUN" != "yes" ] ; then
    log_progress_msg "(disabled)"
    log_end_msg 0

    exit 0
  fi
  if [ ! -e $PIDDIR ]; then
    mkdir $PIDDIR
    chown ${COLLECTOR_USER}:${COLLECTOR_USER} $PIDDIR
  fi
  if running ; then
    [ "$VERBOSE" != no ] && log_progress_msg "apparently already running"
    return 1
  else
    start-stop-daemon --start --quiet --oknodo -m --pidfile $PIDFILE \
      --user $COLLECTOR_USER --chuid $COLLECTOR_USER \
      --background --startas /bin/bash -- \
      -c "exec $COLLECTOR_BIN $DAEMON_ARGS >> /var/log/graylog-collector/console.log 2>&1"
    sleep 2
    if running ; then
      return 0
    else
      return 2
    fi
  fi
}

do_stop()
{
  start-stop-daemon --stop --quiet --oknodo --user $COLLECTOR_USER \
    --retry=TERM/60/KILL/5 --pidfile $PIDFILE
  rm -f $PIDFILE
  return "0"
}

case "$1" in
  start)
  [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
  do_start
  case "$?" in
    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
  esac
  ;;
  stop)
  [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
  do_stop
  case "$?" in
    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
  esac
  ;;
  status)
       status_of_proc -p "${PIDFILE}" "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  restart|force-reload)
  log_daemon_msg "Restarting $DESC" "$NAME"
  do_stop
  case "$?" in
    0|1)
    do_start
    case "$?" in
      0) log_end_msg 0 ;;
      1) log_end_msg 1 ;; # Old process is still running
      *) log_end_msg 1 ;; # Failed to start
    esac
    ;;
    *)
    # Failed to stop
    log_end_msg 1
    ;;
  esac
  ;;
  *)
  echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
  exit 3
  ;;
esac

:
